################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file build_helper
# brief
# author Laurent Thomas, Lionel GAUTHIER
#
#######################################
################################
# include helper functions
################################
SCRIPT=$(readlink -f ${BASH_SOURCE})
THIS_SCRIPT_PATH=`dirname $SCRIPT`
source $THIS_SCRIPT_PATH/build_helper
source $THIS_SCRIPT_PATH/build_helper.lfds
source $THIS_SCRIPT_PATH/build_helper.gtpnl
source $THIS_SCRIPT_PATH/build_helper.ovs


#-------------------------------------------------------------------------------
# arg1 is force (no interactive script)
install_libevent_2.1.x_from_source() {
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install libevent-2.1.8 ? <y/N> " prompt
    OPTION=""
  else
    prompt='y'
    OPTION="-y"
  fi

  echo "Install libevent-2.1.x from source"

  if [[ $prompt =~ [yY](es)* ]]
  then
    cd /tmp
    echo "Downloading libevent archive"
    $SUDO rm -rf /tmp/libevent*
    wget https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz
    if [ ! -f libevent-2.1.8-stable.tar.gz ]; then
      echo_error "Could not download libevent source files"
      cd -
      return 1
    fi
    tar -xzf libevent-2.1.8-stable.tar.gz
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    cd libevent-2.1.8-stable/
    ./configure
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    make
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    #make verify
    #ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO make install
    cd /tmp
    rm -rf /tmp/libevent*
  fi
  return 0
}


#-------------------------------------------------------------------------------
#arg1 is force (no interactive script)
check_install_spgw_software() {

  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi

  required_gcc_version=4.9.0

  echo "Check supported distribution"
  check_supported_distribution
  [[ $? -ne 0 ]] && return $?

  # prevent lock on /var/lib/dpkg/lock 
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    #$SUDO systemctl mask apt-daily.service
    #$SUDO systemctl mask apt-daily.timer
    #$SUDO systemctl mask apt-daily-upgrade.service
    #$SUDO systemctl mask apt-daily-upgrade.timer
    $SUDO sed -i 's/1/0/g' /etc/apt/apt.conf.d/10periodic
  fi
  
  update_package_db
  
  

  check_enable_epel_repos

  # Compilers, generators, ...
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    PACKAGE_LIST="\
      autoconf \
      automake \
      bison \
      build-essential \
      cmake \
      daemon \
      doxygen \
      flex \
      gdb \
      git"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      autoconf \
      automake \
      bison \
      $CMAKE \
      doxygen \
      flex \
      gdb \
      git"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  echo "Install build tools"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  

  # Libraries
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    case "$(get_distribution_release)" in
	"ubuntu14.04" | "ubuntu16.04" | "ubuntu17.04" | "ubuntu17.10")
	    specific_packages="libconfig8-dev"
	    ;;
	"ubuntu18.04")
	    specific_packages="libconfig-dev"
	    ;;
    esac
    PACKAGE_LIST="\
      $specific_packages \
      guile-2.0-dev \
      libcurl4-gnutls-dev \
      libevent-dev \
      libgcrypt11-dev \
      libgmp-dev \
      libhogweed? \
      libidn2-0-dev \
      libidn11-dev \
      libpthread-stubs0-dev \
      libssl-dev \
      libtool \
      libxml2 \
      libxml2-dev \
      openssl \
      python \
      pkg-config"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      guile-devel \
      libconfig-devel \
      libgcrypt-devel \
      gmp-devel \
      libidn2-devel \
      libidn-devel \
      lksctp-tools \
      lksctp-tools-devel \
      openssl-devel \
      libtool \
      libxml2 \
      libxml2-devel \
      openssl \
      check \
      python \
      pkgconfig"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  echo "Install distro libs"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  # Networking
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    case "$(get_distribution_release)" in
	"ubuntu14.04" | "ubuntu16.04" | "ubuntu17.04" | "ubuntu17.10")
	    specific_packages="iproute"
	    ;;
	"ubuntu18.04")
	    specific_packages="iproute2"
	    ;;
    esac
    PACKAGE_LIST="\
      $specific_packages \
      ethtool \
      iperf \
      vlan"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      ethtool \
      iperf \
      iproute \
      vconfig"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  echo "Install networking tools"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  if [[ "$OS_DISTRO" == "ubuntu" ]]; then
    PACKAGE_LIST="\
      check \
      python-dev \
      python-pexpect \
      unzip"
  elif [[ "$OS_DISTRO" == "rhel" ]] || [[ "$OS_DISTRO" == "centos" ]]; then
    PACKAGE_LIST="\
      check \
      python-devel \
      pexpect \
      unzip"
  elif [[ "$OS_DISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      check \
      python-devel \
      python2-pexpect \
      unzip"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  echo "Install $PACKAGE_LIST"
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  install_liblfds7.1.0_from_source $1
  ret=$?;[[ $ret -ne 0 ]] && return $ret


  gcc_version=`gcc --version | head -n1 | cut -d" " -f4`
  if ! version_gt $gcc_version $required_gcc_version; then
    if [ x$OPTION = x"-y" ]; then 
      prompt='y'
    else
      read -p "gcc-$required_gcc_version is required. Do you want to upgrade gcc? <y/N> " prompt
    fi
    if [[ $prompt =~ [yY](es)* ]]; then
      echo "Upgrade gcc"
      $SUDO add-apt-repository -y ppa:ubuntu-toolchain-r/test
      ret=$?;[[ $ret -ne 0 ]] && return $ret
      $SUDO apt-get update
      ret=$?;[[ $ret -ne 0 ]] && return $ret
      $SUDO apt-get install gcc-`echo -n $required_gcc_version | cut -d'.' -f3 --complement`
      ret=$?;[[ $ret -ne 0 ]] && return $ret
      update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9
      ret=$?;[[ $ret -ne 0 ]] && return $ret
      update-alternatives --config gcc
    fi
  fi


  if [ ! -z ${ENABLE_LIBGTPNL+x} ]; then 
    echo "Install libgtpnl"
    install_libgtpnl_from_source $1
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    install_gtp_mark_kernel_module $1
    ret=$?;[[ $ret -ne 0 ]] && return $ret
  fi

  if [ ! -z ${ENABLE_OPENFLOW_MOSAIC+x} ]; then
    echo "Install libfluid"
    install_libfluid_from_source $1
    [[ $? -ne 0 ]] && return $?
  fi


  if [ ! -z ${ENABLE_OPENFLOW+x} ]  ||  [ ! -z ${ENABLE_OPENFLOW_MOSAIC+x} ]; then
    echo "Install GTP kernel module"
    install_gtp_ovs_kernel_module $1
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    echo "Install ovs"
    install_ovs_gtp_kernel_space_from_source $1
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    
    # For fluid under openair-cn/src dir
    # install_libevent_2.1.x_from_source $1
    # ret=$?;[[ $ret -ne 0 ]] && return $ret
    
    # optional but recommended for secure connection towards controller
    $SUDO apt-get install $OPTION autoconf libtool build-essential pkg-config
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO apt-get install $OPTION libssl-dev
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    
  fi
  return 0
}

