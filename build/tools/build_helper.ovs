################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file build_helper
# brief
# author Laurent Thomas, Lionel GAUTHIER
#
#######################################
SCRIPT=$(readlink -f ${BASH_SOURCE})
THIS_SCRIPT_PATH=`dirname $SCRIPT`
source $THIS_SCRIPT_PATH/build_helper

#-------------------------------------------------------------------------------
# Followed http://opennetworkingfoundation.github.io/libfluid/md_doc_QuickStart.html
install_libfluid_from_source(){
  if [ $1 -eq 0 ]; then
    OPTION=""
    read -p "Do you want to install libfluid? <y/N> " prompt
  else
    prompt='y'
    OPTION="-y"
  fi
  
  if [[ $prompt =~ [yY](es)* ]]
  then
    # optional but recommended for secure connection towards controller
    $SUDO apt-get install $OPTION autoconf libtool build-essential pkg-config
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO apt-get install $OPTION libevent-dev libssl-dev
    ret=$?;[[ $ret -ne 0 ]] && return $ret

    SAVEDPWD=${PWD}
    
    $SUDO rm -rf /tmp/fluid
    mkdir /tmp/fluid
    cd /tmp/fluid
    git clone https://github.com/OpenNetworkingFoundation/libfluid.git
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    cd libfluid
    ./bootstrap.sh
    ret=$?;[[ $ret -ne 0 ]] && return $ret


    cd libfluid_base
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    ./configure --prefix=/usr
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    make
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO make install
    ret=$?;[[ $ret -ne 0 ]] && return $ret

    cd /tmp/fluid/libfluid/libfluid_msg
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    ./configure --prefix=/usr
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    make
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO make install
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    cd $SAVEDPWD
  fi
  return 0
}


#-------------------------------------------------------------------------------
install_gtp_ovs_kernel_module() {

  # explicit
  local DATA_PLANE_SUPPORTED_KERNEL_MIN_VERSION="4.9.1"
  local DATA_PLANE_SUPPORTED_KERNEL_MAX_VERSION="4.9.108"

  if [ $1 -gt 0 ]; then
    OPTION="-y"
  else
    OPTION=""
  fi
  
  if [ $1 -eq 0 ]; then
    read -p "Do you want to install modified GTP kernel module for OVS ? <y/N> " prompt
  else
    prompt='y'
  fi
  if [[ $prompt =~ [yY](es)* ]]
  then
  
    echo "Check kernel"
    current_kernel_release=`uname -r | cut -d '-' -f1`

    version_le $current_kernel_release $DATA_PLANE_SUPPORTED_KERNEL_MAX_VERSION
    if [ $? -ne 0 ]; then
      echo_error "Kernel in $DATA_PLANE_SUPPORTED_KERNEL_MIN_VERSION...$DATA_PLANE_SUPPORTED_KERNEL_MAX_VERSION required. Aborting installation"
      return 1
    fi
    version_ge $current_kernel_release $DATA_PLANE_SUPPORTED_KERNEL_MIN_VERSION
    if [ $? -ne 0 ]; then
      echo_error "Kernel in $DATA_PLANE_SUPPORTED_KERNEL_MIN_VERSION...$DATA_PLANE_SUPPORTED_KERNEL_MAX_VERSION required. Aborting installation"
      return 1
    fi
  
    $SUDO modprobe --remove gtp
      
    $SUDO rm -rf /tmp/gtp
    mkdir /tmp/gtp
    cd /tmp/gtp
    echo 'OVS: Cloning openair-cn-extras'
    git clone https://github.com/OPENAIRINTERFACE/openair-cn-extras.git
    ret=$?;[[ $ret -ne 0 ]] && return $ret

    cd openair-cn-extras/linux-4.9.0-gtp-module
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    make
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO make install  # this overwrites the old gtp.ko
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO depmod -a

    $SUDO modprobe udp_tunnel
    $SUDO modprobe ip6_udp_tunnel
    $SUDO modprobe gtp
    ret=$?;[[ $ret -ne 0 ]] && return $ret
  fi
  return 0
}


#-------------------------------------------------------------------------------
install_ovs_gtp_user_space_from_source(){
  echo_error "TODO install_ovs_gtp_user_space_from_source() if necessary"
  return 1
}

#-------------------------------------------------------------------------------
ovs_load_kernel_modules(){
  $SUDO modprobe udp_tunnel
  $SUDO modprobe ip6_udp_tunnel
  $SUDO modprobe gtp
  ret=$?;[[ $ret -ne 0 ]] &&  echo_error "Could not load gtp kernel module" && return $ret
  #$SUDO modprobe gre
  #$SUDO modprobe ip_gre
  #$SUDO modprobe ip6_gre
  #$SUDO modprobe geneve
  #$SUDO modprobe vxlan
  sync
  $SUDO modprobe nf_conntrack
  $SUDO modprobe nf_defrag_ipv6
  
  $SUDO modprobe libcrc32c
  $SUDO modprobe nf_nat 
  $SUDO modprobe nf_nat_ipv4 
  $SUDO modprobe nf_nat_ipv6 
  
  #$SUDO modprobe openvswitch
  $SUDO insmod /lib/modules/`uname -r`/extra/openvswitch.ko
  ret=$?;[[ $ret -ne 0 ]] && echo_error "Could not load /lib/modules/`uname -r`/extra/openvswitch.ko kernel module" && return $ret
  sync
  #sleep 7
  #sync
  #$SUDO insmod /lib/modules/`uname -r`/extra/vport-gtp.ko
  #ret=$?;[[ $ret -ne 0 ]] && return $ret
  #$SUDO insmod /lib/modules/`uname -r`/extra/vport-geneve.ko
  #$SUDO insmod /lib/modules/`uname -r`/extra/vport-gre.ko
  #$SUDO insmod /lib/modules/`uname -r`/extra/vport-lisp.ko
  #$SUDO insmod /lib/modules/`uname -r`/extra/vport-stt.ko
  #$SUDO insmod /lib/modules/`uname -r`/extra/vport-vxlan.ko
  return 0
}

#-------------------------------------------------------------------------------
ovs_unload_kernel_modules(){
  $SUDO modprobe --quiet --remove vport_gtp
  $SUDO modprobe --quiet --remove vport-geneve
  $SUDO modprobe --quiet --remove vport-gre  
  $SUDO modprobe --quiet --remove vport-lisp
  $SUDO modprobe --quiet --remove vport-stt
  $SUDO modprobe --quiet --remove vport-vxlan
  $SUDO modprobe --quiet --remove openvswitch
  $SUDO modprobe --quiet --remove gtp
  $SUDO modprobe --quiet --remove gre
  $SUDO modprobe --quiet --remove ip_gre
  $SUDO modprobe --quiet --remove ip6_gre
  $SUDO modprobe --quiet --remove geneve
  $SUDO modprobe --quiet --remove vxlan
  return 0
}

#-------------------------------------------------------------------------------
# arg1 is OVS bridge name
ovs_stop() {
  if [ "$#" -eq 1 ]; then
    $SUDO ovs-vsctl del-br $1
    $SUDO pkill ovs-vswitchd
    [[ $? -eq 0 ]] || echo_success "killed ovsdb-vswitchd"
    $SUDO pkill ovsdb-server
    [[ $? -eq 0 ]] || echo_success "killed ovsdb-server"
    ovs_unload_kernel_modules
  else
    echo_error "usage: ovs_stop bridge_name"
    return 1
  fi
}

#-------------------------------------------------------------------------------
# arg1 is init requested
ovs_start() {
  ovs_load_kernel_modules
  [[ $? -ne 0 ]] && return $?
  
   export PATH=$PATH:/usr/local/share/openvswitch/scripts

  $SUDO mkdir -m 777 -p /usr/local/var/log/openvswitch/
  
  # From http://www.openvswitch.org/support/dist-docs-2.5/INSTALL.md.html
  
  echo "Starting ovsdb-server..."
  pgrep ovsdb-server || $SUDO ovsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \
                 --remote=db:Open_vSwitch,Open_vSwitch,manager_options \
                 --private-key=db:Open_vSwitch,SSL,private_key \
                 --certificate=db:Open_vSwitch,SSL,certificate \
                 --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
                 --pidfile --detach --log-file
  ret=$?;[[ $ret -ne 0 ]] && echo_error "Failed to start ovsdb-server" && return $ret
  echo_success "ovsdb-server running"
  sleep 1

  if [ "$#" -ge 1 ] && [ $1 -eq 1 ]; then
    # Then initialize the database using ovs-vsctl. This is only necessary the first
    # time after you create the database with ovsdb-tool (but running it at any time 
    # is harmless):
    echo "Init ovs db..."
    $SUDO ovs-vsctl --no-wait init
    ret=$?;[[ $ret -ne 0 ]] && echo_error "Failed to init OVS db" && return $ret
    echo_success "Initialized ovs db."
  fi

  # Then start the main Open vSwitch daemon, telling it to connect to the same 
  # Unix domain socket:
  echo "Starting vswitchd..."
  pgrep ovs-vswitchd || $SUDO ovs-vswitchd -v --pidfile --detach --log-file=/usr/local/var/log
  # pgrep ovs-vswitchd || $SUDO ovs-vswitchd -v --pidfile --detach --log-file=/usr/local/var/log/openvswitch/ovs-vswitchd.log -vconsole:dbg -vsyslog:dbg -vfile:dbg
  ret=$?;[[ $ret -ne 0 ]] && echo_error "Failed to start vswitchd" && return $ret
  echo_success "vswitchd running"
  sleep 1
  return 0
}

#-------------------------------------------------------------------------------
ovs_clean_installation() {
  # Should not be there
  $SUDO $SUDO apt-get remove -y openvswitch-switch openvswitch-common
  ovs_stop
  $SUDO rm -Rf /tmp/ovs

  $SUDO rm -Rfv /usr/local/share/openvswitch
  $SUDO rm -Rfv /usr/local/var/lib/openvswitch
  $SUDO rm -Rfv /usr/local/var/run/openvswitch
  $SUDO rm -Rfv /var/lib/openvswitch
  $SUDO rm -Rfv /usr/local/lib/libopenvswitch*
  $SUDO rm -fv  /usr/local/lib/pkgconfig/libopenvswitch.pc
  $SUDO rm -Rfv /usr/local/include/openvswitch
  $SUDO rm -Rfv /usr/local/etc/openvswitch
  $SUDO rm -Rfv /lib/modules/`uname -r`/extra/*.ko
  return 0
}

#-------------------------------------------------------------------------------
install_ovs_gtp_kernel_space_from_source(){

  # explicit
  local DATA_PLANE_SUPPORTED_KERNEL_MIN_VERSION="4.9.1"
  local DATA_PLANE_SUPPORTED_KERNEL_MAX_VERSION="4.9.108"

  if [ $1 -eq 0 ]; then
    OPTION=""
    read -p "Do you want to install Open vSwitch patched? <y/N> " prompt
  else
    prompt='y'
    OPTION="-y"
  fi

  if [[ $prompt =~ [yY](es)* ]]
  then
    echo "Check kernel"
    current_kernel_release=`uname -r | cut -d '-' -f1`

    version_le $current_kernel_release $DATA_PLANE_SUPPORTED_KERNEL_MAX_VERSION
    if [ $? -ne 0 ]; then
      echo_error "Kernel in $DATA_PLANE_SUPPORTED_KERNEL_MIN_VERSION...$DATA_PLANE_SUPPORTED_KERNEL_MAX_VERSION required. Aborting installation"
      return 1
    fi
    version_ge $current_kernel_release $DATA_PLANE_SUPPORTED_KERNEL_MIN_VERSION
    if [ $? -ne 0 ]; then
      echo_error "Kernel in $DATA_PLANE_SUPPORTED_KERNEL_MIN_VERSION...$DATA_PLANE_SUPPORTED_KERNEL_MAX_VERSION required. Aborting installation"
      return 1
    fi

    # optional but recommended for secure connection towards controller
    $SUDO apt-get install $OPTION libssl-dev libcap-ng-dev python-pip python-six
    ret=$?;[[ $ret -ne 0 ]] && return $ret

    # required by ovs
    # if problems with locale:
    # locale
    # sudo locale-gen "en_US.UTF-8"
    # sudo dpkg-reconfigure locales

    #echo 'OVS: Upgrading pip'
    # sudo -H python -m pip install --upgrade pip
    #sudo -H pip install --upgrade pip
    #[[ $? -ne 0 ]] && return $?

    #echo 'OVS: Installing six'
    #sudo -H python -m pip install six
    #sudo -H pip install six
    #echo $?
    #ret=$?;[[ $ret -ne 0 ]] && return $ret

    ovs_clean_installation

    SAVEDPWD=${PWD}

    $SUDO rm -rf /tmp/gtp
    mkdir /tmp/gtp
    cd /tmp/gtp
    echo 'OVS: Cloning openair-cn-extras'
    git clone https://github.com/OPENAIRINTERFACE/openair-cn-extras.git
    [[ $? -ne 0 ]] && return $?

    git_username=`git config --get user.name`
    if [ "$git_username" == "" ]; then
      if [ $1 -eq 0 ]; then
        echo "You haven't configured your Git yet. Please, provide a name and e-mail address."
        echo -n 'Name:' 
        read git_username
        echo -n 'E-mail:' 
        read git_email
        git config --global user.name "$git_username"
        git config --global user.email "$git_email"
      else
        git config --global user.name "ciopenaircn"
        git config --global user.email "ciopenaircn@openairinterface.org"
      fi
    fi

    $SUDO rm -rf /tmp/ovs
    cd /tmp
    git clone https://github.com/openvswitch/ovs.git
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    cd ovs
    git checkout 31b88c97512b5dca9f1f6f73bb33292618eee88a
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    git am /tmp/gtp/openair-cn-extras/ovs/0001-datapath-GPRS-Tunneling-Protocol-GTP-support.patch
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    git am /tmp/gtp/openair-cn-extras/ovs/0002-userspace-GPRS-Tunneling-Protocol-GTP-support.patch
    ret=$?;[[ $ret -ne 0 ]] && return $ret

    ./boot.sh
    ./configure --with-linux=/lib/modules/`uname -r`/build
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    make -j`nproc`
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    cat /tmp/gtp/openair-cn-extras/linux-4.9.0-gtp-module/Module.symvers >> datapath/linux/Module.symvers
    make
    $SUDO make modules_install  # this overwrites openvswitch.ko, vport.ko, vport-gtp.ko, etc.
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO make install
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    $SUDO mkdir -p /usr/local/etc/openvswitch
    $SUDO mkdir -p /usr/local/var/run/openvswitch
    $SUDO ovsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema
    ret=$?;[[ $ret -ne 0 ]] && return $ret
    cd $SAVEDPWD
    
    ovs_start 1
  fi
  return 0
}

